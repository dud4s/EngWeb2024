const http = require("http");
const url = require("url");
const axios = require("axios");
const fs = require("fs");

function genOcorrencias(ocorrencias) {
  pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de Ocorrências</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-blue">
              <h1>Lista de Ocorrências</h1>
            </header>
            
            <div class="w3-container">
                <table class="w3-table w3-striped">
                    <tr>
                        <th>Identificador</th>
                        <th>Data</th>
                        <th>Animal</th>
                      </tr>
    `;
  ocorrencias.forEach((ocorr) => {
    pagHTML += `
        <tr>
            <td>${ocorr.id}</td>
            <td>${ocorr.bite_date}</td>
            <td>${ocorr.SpeciesIDDesc}</td>
        </tr>
        `;
  });
  pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div>
    </body>
</html>
`;
  return pagHTML;
}

const getMethodColour = (method) => {
  switch (method) {
    case "GET":
      return "\x1b[92m";
    case "POST":
      return "\x1b[34m";
    case "PUT":
      return "\x1b[33m";
    case "DELETE":
      return "\x1b[31m";
    default:
      return "\x1b[37m";
  }
};

const server = http.createServer(function (req, res) {
  console.log(getMethodColour(req.method), req.method, "\x1b[37m", req.url);

  if (req.url == "/") {
    fs.readFile("index.html", (err, data) => {
      res.writeHead(200, { "Content-Type": "text/html; charset=utf8" });
      res.write(data);
      res.end();
    });
  } else if (req.url == "/animals") {
    axios
      .get("http://localhost:3000/bites")
      .then((resp) => {
        const data = resp.data;
        res.writeHead(200, { "Content-Type": "text/html; charset=utf8" });
        res.write(genOcorrencias(data));
        //res.writeHead(200, { "Content-Type": "text/json" });
        //res.write(JSON.stringify(data));
        res.end();
      })
      .catch((err) => {
        res.writeHead(500, { "Content-Type": "text/html; charset=utf8" });
        res.write("<p>Error: " + err + "</p>");
      });
  } else if (req.url == "/w3.css") {
    fs.readFile("w3.css", (err, data) => {
      res.writeHead(200, { "Content-Type": "text/css" });
      res.write(data);
      res.end();
    });
  } else {
    res.writeHead(400, { "Content-Type": "text/html; charset=utf8" });
    res.write("<p>Error: Not supported request.</p>");
    res.write("<pre>" + req.method + " " + req.url + "</pre>");
    res.end();
  }
});

const port = 8081;
server.listen(port, () => {
  console.log(`Server running on https://localhost:${port}...`);
});
